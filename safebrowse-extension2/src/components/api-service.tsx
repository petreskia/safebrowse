"use client";

import { useState } from "react";

// Interfaces for API requests & responses
export interface WebsiteAnalysisRequest {
  url: string;
}

export interface WebsiteAnalysisResponse {
  riskLevel: "safe" | "caution" | "danger";
  summary: string;
  details: {
    https: boolean;
    domainAge: string;
    impersonation: boolean;
    reportedScam: boolean;
  };
  warnings: string[];
}

export interface DocumentAnalysisRequest {
  content: string | File;
}

export interface DocumentAnalysisResponse {
  summary: string;
}

// Custom hook for API service
export const useApiService = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const simulateApiCall = <T,>(response: T, delay = 1500): Promise<T> =>
    new Promise((resolve) => setTimeout(() => resolve(response), delay));

  const analyzeWebsite = async (request: WebsiteAnalysisRequest) => {
    setIsLoading(true);
    setError(null);

    const response: WebsiteAnalysisResponse = {
      riskLevel:
        Math.random() > 0.7
          ? "danger"
          : Math.random() > 0.4
          ? "caution"
          : "safe",
      summary: "Analysis complete",
      details: {
        https: request.url.startsWith("https"),
        domainAge: "2 years",
        impersonation: Math.random() > 0.7,
        reportedScam: Math.random() > 0.8,
      },
      warnings: [
        "Domain was registered recently",
        "Similar to known brand names",
      ],
    };

    return simulateApiCall(response)
      .then((res) => {
        setIsLoading(false);
        return res;
      })
      .catch(() => {
        setIsLoading(false);
        setError("Failed to analyze website");
        return null;
      });
  };

  const analyzeDocument = async (_request: DocumentAnalysisRequest) => {
    void _request; // mark as unused

    setIsLoading(true);
    setError(null);

    const response: DocumentAnalysisResponse = {
      summary:
        "This is a sample document summary that would be generated by GPT-4 in a real implementation.",
    };

    return new Promise((resolve) => {
      setTimeout(() => {
        setIsLoading(false);
        resolve(response);
      }, 2000);
    }).catch(() => {
      setIsLoading(false);
      setError("Failed to analyze document");
    });
  };

  return { isLoading, error, analyzeWebsite, analyzeDocument };
};
